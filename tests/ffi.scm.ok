basic simple type>type test:
   c2c (1): [1 => 1] 1
   c2c (9): [9 => 9] 9
   c2c (0): [0 => 0] 0
   s2s (1): [1 => 1] 1
   s2s (9): [9 => 9] 9
   s2s (0): [0 => 0] 0
   i2i (1): [1 => 1] 1
   i2i (9): [9 => 9] 9
   i2i (0): [0 => 0] 0
   l2l (1): [1 => 1] 1
   l2l (9): [9 => 9] 9
   l2l (0): [0 => 0] 0
   q2q (1): [1 => 1] 1
   q2q (9): [9 => 9] 9
   q2q (0): [0 => 0] 0
   C2C (1): [1 => 1] 1
   C2C (9): [9 => 9] 9
   C2C (0): [0 => 0] 0
   C2C (-9): [-9 => -9] -9
   C2C (-1): [-1 => -1] -1
   S2S (1): [1 => 1] 1
   S2S (9): [9 => 9] 9
   S2S (0): [0 => 0] 0
   S2S (-9): [-9 => -9] -9
   S2S (-1): [-1 => -1] -1
   I2I (1): [1 => 1] 1
   I2I (9): [9 => 9] 9
   I2I (0): [0 => 0] 0
   I2I (-9): [-9 => -9] -9
   I2I (-1): [-1 => -1] -1
   L2L (1): [1 => 1] 1
   L2L (9): [9 => 9] 9
   L2L (0): [0 => 0] 0
   L2L (-9): [-9 => -9] -9
   L2L (-1): [-1 => -1] -1
   Q2Q (1): [1 => 1] 1
   Q2Q (9): [9 => 9] 9
   Q2Q (0): [0 => 0] 0
   Q2Q (-9): [-9 => -9] -9
   Q2Q (-1): [-1 => -1] -1
type limits checking:
   short (32767): [32767 => 32767] 32767
   short (-32767): [-32767 => -32767] -32767
   unsigned short (32767): [32767 => 32767] 32767
   unsigned short (65535): [65535 => 65535] 65535
   int (2147483647): [2147483647 => 2147483647] 2147483647
   int (-2147483647): [-2147483647 => -2147483647] -2147483647
   unsigned int (2147483647): [2147483647 => 2147483647] 2147483647
   unsigned int (4294967295): [4294967295 => 4294967295] 4294967295
   long long (9223372036854775807): [9223372036854775807 => 9223372036854775807] 9223372036854775807
   long long (-9223372036854775807): [-9223372036854775807 => -9223372036854775807] -9223372036854775807
   unsigned long long (9223372036854775807): [9223372036854775807 => 9223372036854775807] 9223372036854775807
   unsigned long long (18446744073709551615): [18446744073709551615 => 18446744073709551615] 18446744073709551615
floating points type>type test:
   float (0): [0.000000 => 0.000000] .SMALL
   float (11/10): [1.100000 => 1.100000] 1.100000023
   float (1.1): [1.100000 => 1.100000] 1.100000023
   float (-11/10): [-1.100000 => -1.100000] 1.100000023
   float (1.1): [-1.100000 => -1.100000] 1.100000023
   double (0): [0.000000 => 0.000000] .SMALL
   double (11/10): [1.100000 => 1.100000] 1.1
   double (1.1): [1.100000 => 1.100000] 1.1
   double (-11/10): [-1.100000 => -1.100000] 1.1
   double (1.1): [-1.100000 => -1.100000] 1.1
16 integer arguments type>type test:
   cccccccccccccccc2c (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 => 120] 120
   cccccccccccccccc2c (15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0): [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 => 120] 120
   ssssssssssssssss2s (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 => 120] 120
   ssssssssssssssss2s (15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0): [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 => 120] 120
   iiiiiiiiiiiiiiii2i (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 => 120] 120
   iiiiiiiiiiiiiiii2i (15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0): [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 => 120] 120
   llllllllllllllll2l (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 => 120] 120
   llllllllllllllll2l (15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0): [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 => 120] 120
   qqqqqqqqqqqqqqqq2q (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 => 120] 120
   qqqqqqqqqqqqqqqq2q (15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0): [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 => 120] 120
   CCCCCCCCCCCCCCCC2C (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 => 120] 120
   CCCCCCCCCCCCCCCC2C (15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0): [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 => 120] 120
   CCCCCCCCCCCCCCCC2C (0 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15): [0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15 => -120] -120
   CCCCCCCCCCCCCCCC2C (-15 -14 -13 -12 -11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0): [-15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0 => -120] -120
   SSSSSSSSSSSSSSSS2S (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 => 120] 120
   SSSSSSSSSSSSSSSS2S (15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0): [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 => 120] 120
   SSSSSSSSSSSSSSSS2S (0 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15): [0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15 => -120] -120
   SSSSSSSSSSSSSSSS2S (-15 -14 -13 -12 -11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0): [-15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0 => -120] -120
   IIIIIIIIIIIIIIII2I (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 => 120] 120
   IIIIIIIIIIIIIIII2I (15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0): [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 => 120] 120
   IIIIIIIIIIIIIIII2I (0 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15): [0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15 => -120] -120
   IIIIIIIIIIIIIIII2I (-15 -14 -13 -12 -11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0): [-15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0 => -120] -120
   LLLLLLLLLLLLLLLL2L (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 => 120] 120
   LLLLLLLLLLLLLLLL2L (15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0): [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 => 120] 120
   LLLLLLLLLLLLLLLL2L (0 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15): [0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15 => -120] -120
   LLLLLLLLLLLLLLLL2L (-15 -14 -13 -12 -11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0): [-15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0 => -120] -120
   QQQQQQQQQQQQQQQQ2Q (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 => 120] 120
   QQQQQQQQQQQQQQQQ2Q (15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0): [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 => 120] 120
   QQQQQQQQQQQQQQQQ2Q (0 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15): [0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15 => -120] -120
   QQQQQQQQQQQQQQQQ2Q (-15 -14 -13 -12 -11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0): [-15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0 => -120] -120
16 floating point arguments type>type test:
   16 floats (0 11/10 11/5 33/10 22/5 11/2 33/5 77/10 44/5 99/10 101/10 1111/100 303/25 1313/100 707/50 303/20): [0.000000, 1.100000, 2.200000, 3.300000, 4.400000, 5.500000, 6.600000, 7.700000, 8.800000, 9.900000, 10.100000, 11.110000, 12.120000, 13.130000, 14.140000, 15.150000 => 125.250000] 125.25
   16 floats (303/20 707/50 1313/100 303/25 1111/100 101/10 99/10 44/5 77/10 33/5 11/2 22/5 33/10 11/5 11/10 0): [15.150000, 14.140000, 13.130000, 12.120000, 11.110000, 10.100000, 9.900000, 8.800000, 7.700000, 6.600000, 5.500000, 4.400000, 3.300000, 2.200000, 1.100000, 0.000000 => 125.250000] 125.25
12 mixed type variables test:
   12 arguments (0 1 2 3 4 5 6 7 8 9 123456789/100000 123456789/1000): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1234.567871, 123456.789000 => 124736.356871] 124736.356
done.
