basic simple type>type test:
   c2c (1): [1 => 1] 1
   c2c (9): [9 => 9] 9
   c2c (99): [99 => 99] 99
   c2c (0): [0 => 0] 0
   s2s (1): [1 => 1] 1
   s2s (9): [9 => 9] 9
   s2s (99): [99 => 99] 99
   s2s (0): [0 => 0] 0
   i2i (1): [1 => 1] 1
   i2i (9): [9 => 9] 9
   i2i (99): [99 => 99] 99
   i2i (0): [0 => 0] 0
   l2l (1): [1 => 1] 1
   l2l (9): [9 => 9] 9
   l2l (99): [99 => 99] 99
   l2l (0): [0 => 0] 0
   q2q (1): [1 => 1] 1
   q2q (9): [9 => 9] 9
   q2q (99): [99 => 99] 99
   q2q (0): [0 => 0] 0
   C2C (1): [1 => 1] 1
   C2C (9): [9 => 9] 9
   C2C (99): [99 => 99] 99
   C2C (0): [0 => 0] 0
   C2C (-99): [-99 => -99] -99
   C2C (-9): [-9 => -9] -9
   C2C (-1): [-1 => -1] -1
   S2S (1): [1 => 1] 1
   S2S (9): [9 => 9] 9
   S2S (99): [99 => 99] 99
   S2S (0): [0 => 0] 0
   S2S (-99): [-99 => -99] -99
   S2S (-9): [-9 => -9] -9
   S2S (-1): [-1 => -1] -1
   I2I (1): [1 => 1] 1
   I2I (9): [9 => 9] 9
   I2I (99): [99 => 99] 99
   I2I (0): [0 => 0] 0
   I2I (-99): [-99 => -99] -99
   I2I (-9): [-9 => -9] -9
   I2I (-1): [-1 => -1] -1
   L2L (1): [1 => 1] 1
   L2L (9): [9 => 9] 9
   L2L (99): [99 => 99] 99
   L2L (0): [0 => 0] 0
   L2L (-99): [-99 => -99] -99
   L2L (-9): [-9 => -9] -9
   L2L (-1): [-1 => -1] -1
   Q2Q (1): [1 => 1] 1
   Q2Q (9): [9 => 9] 9
   Q2Q (99): [99 => 99] 99
   Q2Q (0): [0 => 0] 0
   Q2Q (-99): [-99 => -99] -99
   Q2Q (-9): [-9 => -9] -9
   Q2Q (-1): [-1 => -1] -1
basic simple (fft* type)>type test:
   rc2c (1): [1 => 1] 1
   rc2c (9): [9 => 9] 9
   rc2c (99): [99 => 99] 99
   rc2c (0): [0 => 0] 0
   rs2s (1): [1 => 1] 1
   rs2s (9): [9 => 9] 9
   rs2s (99): [99 => 99] 99
   rs2s (0): [0 => 0] 0
   ri2i (1): [1 => 1] 1
   ri2i (9): [9 => 9] 9
   ri2i (99): [99 => 99] 99
   ri2i (0): [0 => 0] 0
   rl2l (1): [1 => 1] 1
   rl2l (9): [9 => 9] 9
   rl2l (99): [99 => 99] 99
   rl2l (0): [0 => 0] 0
   rq2q (1): [1 => 1] 1
   rq2q (9): [9 => 9] 9
   rq2q (99): [99 => 99] 99
   rq2q (0): [0 => 0] 0
   rC2C (1): [1 => 1] 1
   rC2C (9): [9 => 9] 9
   rC2C (99): [99 => 99] 99
   rC2C (0): [0 => 0] 0
   rC2C (-99): [-99 => -99] -99
   rC2C (-9): [-9 => -9] -9
   rC2C (-1): [-1 => -1] -1
   rS2S (1): [1 => 1] 1
   rS2S (9): [9 => 9] 9
   rS2S (99): [99 => 99] 99
   rS2S (0): [0 => 0] 0
   rS2S (-99): [-99 => -99] -99
   rS2S (-9): [-9 => -9] -9
   rS2S (-1): [-1 => -1] -1
   rI2I (1): [1 => 1] 1
   rI2I (9): [9 => 9] 9
   rI2I (99): [99 => 99] 99
   rI2I (0): [0 => 0] 0
   rI2I (-99): [-99 => -99] -99
   rI2I (-9): [-9 => -9] -9
   rI2I (-1): [-1 => -1] -1
   rL2L (1): [1 => 1] 1
   rL2L (9): [9 => 9] 9
   rL2L (99): [99 => 99] 99
   rL2L (0): [0 => 0] 0
   rL2L (-99): [-99 => -99] -99
   rL2L (-9): [-9 => -9] -9
   rL2L (-1): [-1 => -1] -1
   rQ2Q (1): [1 => 1] 1
   rQ2Q (9): [9 => 9] 9
   rQ2Q (99): [99 => 99] 99
   rQ2Q (0): [0 => 0] 0
   rQ2Q (-99): [-99 => -99] -99
   rQ2Q (-9): [-9 => -9] -9
   rQ2Q (-1): [-1 => -1] -1
type limits checking:
   char (-128): [-128 => -128] -128
   char (127): [127 => 127] 127
   unsinged char (127): [127 => 127] 127
   unsinged char (255): [255 => 255] 255
   short (-32768): [-32768 => -32768] -32768
   short (32767): [32767 => 32767] 32767
   unsinged short (32767): [32767 => 32767] 32767
   unsinged short (65535): [65535 => 65535] 65535
   unsinged int (2147483647): [2147483647 => 2147483647] 2147483647
   unsinged int (4294967295): [4294967295 => 4294967295] 4294967295
   unsinged long long (9223372036854775807): [9223372036854775807 => 9223372036854775807] 9223372036854775807
   unsinged long long (18446744073709551615): [18446744073709551615 => 18446744073709551615] 18446744073709551615
floating points type>type test:
   float (11/10): [1.100000 => 1.100000] 1.100000023
   float (1.1): [1.100000 => 1.100000] 1.100000023
   float (99/10): [9.900000 => 9.900000] 9.89999961
   float (9.9): [9.900000 => 9.900000] 9.89999961
   float (9999/100): [99.989998 => 99.989998] 99.9899978
   float (99.9899999): [99.989998 => 99.989998] 99.9899978
   float (0): [0.000000 => 0.000000] 0.0
   float (-9999/100): [-99.989998 => -99.989998] -99.9899978
   float (-99.9899999): [-99.989998 => -99.989998] -99.9899978
   float (-99/10): [-9.900000 => -9.900000] -9.89999961
   float (-9.9): [-9.900000 => -9.900000] -9.89999961
   float (-11/10): [-1.100000 => -1.100000] -1.100000023
   float (-1.1): [-1.100000 => -1.100000] -1.100000023
   float (11/10): [1.100000 => 1.100000] 1.1
   float (1.1): [1.100000 => 1.100000] 1.1
   float (99/10): [9.900000 => 9.900000] 9.9
   float (9.9): [9.900000 => 9.900000] 9.9
   float (9999/100): [99.990000 => 99.990000] 99.9899999
   float (99.9899999): [99.990000 => 99.990000] 99.9899999
   float (0): [0.000000 => 0.000000] 0.0
   float (-9999/100): [-99.990000 => -99.990000] -99.9899999
   float (-99.9899999): [-99.990000 => -99.990000] -99.9899999
   float (-99/10): [-9.900000 => -9.900000] -9.9
   float (-9.9): [-9.900000 => -9.900000] -9.9
   float (-11/10): [-1.100000 => -1.100000] -1.1
   float (-1.1): [-1.100000 => -1.100000] -1.1
16 integer arguments type>type test:
   cccccccccccccccc2c (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16): [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 => 136] 136
   cccccccccccccccc2c (16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1): [16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 => 136] 136
   ssssssssssssssss2s (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16): [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 => 136] 136
   ssssssssssssssss2s (16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1): [16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 => 136] 136
   iiiiiiiiiiiiiiii2i (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16): [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 => 136] 136
   iiiiiiiiiiiiiiii2i (16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1): [16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 => 136] 136
   llllllllllllllll2l (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16): [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 => 136] 136
   llllllllllllllll2l (16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1): [16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 => 136] 136
   qqqqqqqqqqqqqqqq2q (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16): [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 => 136] 136
   qqqqqqqqqqqqqqqq2q (16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1): [16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 => 136] 136
   CCCCCCCCCCCCCCCC2C (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16): [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 => -120] -120
   CCCCCCCCCCCCCCCC2C (16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1): [16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 => -120] -120
   CCCCCCCCCCCCCCCC2C (-1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15 -16): [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16 => 120] 120
   CCCCCCCCCCCCCCCC2C (-16 -15 -14 -13 -12 -11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1): [-16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1 => 120] 120
   SSSSSSSSSSSSSSSS2S (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16): [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 => 136] 136
   SSSSSSSSSSSSSSSS2S (16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1): [16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 => 136] 136
   SSSSSSSSSSSSSSSS2S (-1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15 -16): [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16 => -136] -136
   SSSSSSSSSSSSSSSS2S (-16 -15 -14 -13 -12 -11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1): [-16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1 => -136] -136
   IIIIIIIIIIIIIIII2I (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16): [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 => 136] 136
   IIIIIIIIIIIIIIII2I (16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1): [16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 => 136] 136
   IIIIIIIIIIIIIIII2I (-1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15 -16): [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16 => -136] -136
   IIIIIIIIIIIIIIII2I (-16 -15 -14 -13 -12 -11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1): [-16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1 => -136] -136
   LLLLLLLLLLLLLLLL2L (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16): [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 => 136] 136
   LLLLLLLLLLLLLLLL2L (16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1): [16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 => 136] 136
   LLLLLLLLLLLLLLLL2L (-1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15 -16): [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16 => -136] -136
   LLLLLLLLLLLLLLLL2L (-16 -15 -14 -13 -12 -11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1): [-16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1 => -136] -136
   QQQQQQQQQQQQQQQQ2Q (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16): [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 => 136] 136
   QQQQQQQQQQQQQQQQ2Q (16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1): [16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 => 136] 136
   QQQQQQQQQQQQQQQQ2Q (-1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15 -16): [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16 => -136] -136
   QQQQQQQQQQQQQQQQ2Q (-16 -15 -14 -13 -12 -11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1): [-16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1 => -136] -136
12 mixed type variables test:
   12 arguments (0 1 2 3 4 5 6 7 8 9 123456789/100000 123456789/1000): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1234.567871, 123456.789000 => 124736.356871] 124736.356
22 mixed type variables test:
   22 integer arguments (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22): [1, 2, 3.000000, 4.000000, 5, 6, 7.000000, 8.000000, 9, 10, 11.000000, 12.000000, 13, 14, 15.000000, 16.000000, 17, 18, 19.000000, 20.000000, 21.000000, 22.000000 => 253.000000] 253.0
   22 mixed arguments (1 2 3 41/10 5 6 36/5 83/10 9 10 57/5 25/2 13 14 78/5 167/10 17 18 99/5 209/10 21 22): [1, 2, 3.000000, 4.100000, 5, 6, 7.200000, 8.300000, 9, 10, 11.400000, 12.500000, 13, 14, 15.600000, 16.700000, 17, 18, 19.799999, 20.900000, 21.000000, 22.000000 => 257.499999] 257.499999
callback: [ (0) ]
callback: [ (1) ]
callback: [ (-1) ]
callback: [ (999999) ]
callback: [ (-999999) ]
callback: [ (0 0) ]
callback: [ (1 -1) ]
callback: [ (-1 1) ]
callback: [ (999999 -999999) ]
callback: [ (-999999 999999) ]
callback: [ (0 0 0) ]
callback: [ (1 -1 2) ]
callback: [ (-1 1 -2) ]
callback: [ (999999 -999999 7777777) ]
callback: [ (-999999 999999 -7777777) ]
callback: [ (0 0 0 0) ]
callback: [ (1 -1 2 -2) ]
callback: [ (-1 1 -2 2) ]
callback: [ (999999 -999999 7777777 -7777777) ]
callback: [ (-999999 999999 -7777777 7777777) ]
callback: [ (0 0 0 0 0) ]
callback: [ (1 -1 2 -2 3) ]
callback: [ (-1 1 -2 2 -3) ]
callback: [ (999999 -999999 7777777 -7777777 11111111) ]
callback: [ (-999999 999999 -7777777 7777777 -11111111) ]
callback: [ (0 0 0 0 0 0) ]
callback: [ (1 -1 2 -2 3 -3) ]
callback: [ (-1 1 -2 2 -3 3) ]
callback: [ (999999 -999999 7777777 -7777777 11111111 -11111111) ]
callback: [ (-999999 999999 -7777777 7777777 -11111111 11111111) ]
callback: [ (0 0 0 0 0 0 0) ]
callback: [ (1 -1 2 -2 3 -3 4) ]
callback: [ (-1 1 -2 2 -3 3 -4) ]
callback: [ (999999 -999999 7777777 -7777777 11111111 -11111111 444444444) ]
callback: [ (-999999 999999 -7777777 7777777 -11111111 11111111 -444444444) ]
callback: [ (0 0 0 0 0 0 0 0) ]
callback: [ (1 -1 2 -2 3 -3 4 -4) ]
callback: [ (-1 1 -2 2 -3 3 -4 4) ]
callback: [ (999999 -999999 7777777 -7777777 11111111 -11111111 444444444 -444444444) ]
callback: [ (-999999 999999 -7777777 7777777 -11111111 11111111 -444444444 444444444) ]
callback: [ (0 0 0 0 0 0 0 0 0) ]
callback: [ (1 -1 2 -2 3 -3 4 -4 5) ]
callback: [ (-1 1 -2 2 -3 3 -4 4 -5) ]
callback: [ (999999 -999999 7777777 -7777777 11111111 -11111111 444444444 -444444444 33333) ]
callback: [ (-999999 999999 -7777777 7777777 -11111111 11111111 -444444444 444444444 -33333) ]
callback: [ (0 0 0 0 0 0 0 0 0 0) ]
callback: [ (1 -1 2 -2 3 -3 4 -4 5 -6) ]
callback: [ (-1 1 -2 2 -3 3 -4 4 -5 6) ]
callback: [ (999999 -999999 7777777 -7777777 11111111 -11111111 444444444 -444444444 33333 22) ]
callback: [ (-999999 999999 -7777777 7777777 -11111111 11111111 -444444444 444444444 -33333 -22) ]
callback: [ (0) ]
callback: [ (1066192077) ]
callback: [ (-1081291571) ]
callback: [ (1232348160) ]
callback: [ (-915135488) ]
callback: [ (0 0 0 0) ]
callback: [ (1 9227469/8388608 -2 -9227469/4194304) ]
callback: [ (-1 -9227469/8388608 2 9227469/4194304) ]
callback: [ (999999 -1000000 111111 -7111111/64) ]
callback: [ (-999999 1000000 -111111 7111111/64) ]
reverse_string(hello): olleh - ok. 
reverse_string_wide(hello): olleh - ok. 
reverse_string(привет): тевирп - ok. 
reverse_string_wide(привет): тевирп - ok. 
reverse_string(Совы (Strigiformes) суть релатівно чісленым рядом класы птахів обсягуюча веце як 200 видів.): .відив 002 кя ецев ачюугясбо віхатп ысалк модяр мынелсіч онвіталер ьтус )semrofigirtS( ывоС - ok. 
reverse_string_wide(Совы (Strigiformes) суть релатівно чісленым рядом класы птахів обсягуюча веце як 200 видів.): .відив 002 кя ецев ачюугясбо віхатп ысалк модяр мынелсіч онвіталер ьтус )semrofigirtS( ывоС - ok. 
reverse_string(ბუსნაირნი (ლათ. Strigiformes) — ფრინველთა რიგი. ფართოდაა გავრცელებული მსოფლიოში (ანტარქტიკული და ზოგიერთი ოკეანური კუნძულის გამოკლებით).): .)თიბელკომაგ სილუძნუკ ირუნაეკო ითრეიგოზ ად ილუკიტქრატნა( იშოილფოსმ ილუბელეცრვაგ აადოთრაფ .იგირ ათლევნირფ — )semrofigirtS .თალ( ინრიანსუბ - ok. 
reverse_string_wide(ბუსნაირნი (ლათ. Strigiformes) — ფრინველთა რიგი. ფართოდაა გავრცელებული მსოფლიოში (ანტარქტიკული და ზოგიერთი ოკეანური კუნძულის გამოკლებით).): .)თიბელკომაგ სილუძნუკ ირუნაეკო ითრეიგოზ ად ილუკიტქრატნა( იშოილფოსმ ილუბელეცრვაგ აადოთრაფ .იგირ ათლევნირფ — )semrofigirtS .თალ( ინრიანსუბ - ok. 
reverse_string(フクロウ目（フクロウもく、梟目、学名 Strigiformes）は鳥類の1目である。): 。るあで目1の類鳥は）semrofigirtS 名学、目梟、くもウロクフ（目ウロクフ - ok. 
reverse_string_wide(フクロウ目（フクロウもく、梟目、学名 Strigiformes）は鳥類の1目である。): 。るあで目1の類鳥は）semrofigirtS 名学、目梟、くもウロクフ（目ウロクフ - ok. 
done.
