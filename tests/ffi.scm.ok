basic simple type>type test:
   c2c (1): [1 => 1] 1
   c2c (125): [125 => 125] 125
   c2c (0): [0 => 0] 0
   s2s (1): [1 => 1] 1
   s2s (125): [125 => 125] 125
   s2s (0): [0 => 0] 0
   i2i (1): [1 => 1] 1
   i2i (125): [125 => 125] 125
   i2i (0): [0 => 0] 0
   l2l (1): [1 => 1] 1
   l2l (125): [125 => 125] 125
   l2l (0): [0 => 0] 0
   q2q (1): [1 => 1] 1
   q2q (125): [125 => 125] 125
   q2q (0): [0 => 0] 0
   C2C (1): [1 => 1] 1
   C2C (125): [125 => 125] 125
   C2C (0): [0 => 0] 0
   C2C (-125): [-125 => -125] -125
   C2C (-1): [-1 => -1] -1
   S2S (1): [1 => 1] 1
   S2S (125): [125 => 125] 125
   S2S (0): [0 => 0] 0
   S2S (-125): [-125 => -125] -125
   S2S (-1): [-1 => -1] -1
   I2I (1): [1 => 1] 1
   I2I (125): [125 => 125] 125
   I2I (0): [0 => 0] 0
   I2I (-125): [-125 => -125] -125
   I2I (-1): [-1 => -1] -1
   L2L (1): [1 => 1] 1
   L2L (125): [125 => 125] 125
   L2L (0): [0 => 0] 0
   L2L (-125): [-125 => -125] -125
   L2L (-1): [-1 => -1] -1
   Q2Q (1): [1 => 1] 1
   Q2Q (125): [125 => 125] 125
   Q2Q (0): [0 => 0] 0
   Q2Q (-125): [-125 => -125] -125
   Q2Q (-1): [-1 => -1] -1
basic simple (fft* type)>type test:
   rc2c ((1)): [1 => 1] 1
   rc2c ((125)): [125 => 125] 125
   rc2c ((0)): [0 => 0] 0
   rs2s ((1)): [1 => 1] 1
   rs2s ((125)): [125 => 125] 125
   rs2s ((0)): [0 => 0] 0
   ri2i ((1)): [1 => 1] 1
   ri2i ((125)): [125 => 125] 125
   ri2i ((0)): [0 => 0] 0
   rl2l ((1)): [1 => 1] 1
   rl2l ((125)): [125 => 125] 125
   rl2l ((0)): [0 => 0] 0
   rq2q ((1)): [1 => 1] 1
   rq2q ((125)): [125 => 125] 125
   rq2q ((0)): [0 => 0] 0
   rC2C ((1)): [1 => 1] 1
   rC2C ((125)): [125 => 125] 125
   rC2C ((0)): [0 => 0] 0
   rC2C ((-125)): [-125 => -125] -125
   rC2C ((-1)): [-1 => -1] -1
   rS2S ((1)): [1 => 1] 1
   rS2S ((125)): [125 => 125] 125
   rS2S ((0)): [0 => 0] 0
   rS2S ((-125)): [-125 => -125] -125
   rS2S ((-1)): [-1 => -1] -1
   rI2I ((1)): [1 => 1] 1
   rI2I ((125)): [125 => 125] 125
   rI2I ((0)): [0 => 0] 0
   rI2I ((-125)): [-125 => -125] -125
   rI2I ((-1)): [-1 => -1] -1
   rL2L ((1)): [1 => 1] 1
   rL2L ((125)): [125 => 125] 125
   rL2L ((0)): [0 => 0] 0
   rL2L ((-125)): [-125 => -125] -125
   rL2L ((-1)): [-1 => -1] -1
   rQ2Q ((1)): [1 => 1] 1
   rQ2Q ((125)): [125 => 125] 125
   rQ2Q ((0)): [0 => 0] 0
   rQ2Q ((-125)): [-125 => -125] -125
   rQ2Q ((-1)): [-1 => -1] -1
type limits checking:
   char (-128): [-128 => -128] -128
   char (127): [127 => 127] 127
   unsinged char (127): [127 => 127] 127
   unsinged char (255): [255 => 255] 255
   short (-32768): [-32768 => -32768] -32768
   short (32767): [32767 => 32767] 32767
   unsinged short (32767): [32767 => 32767] 32767
   unsinged short (65535): [65535 => 65535] 65535
   int (-2147483648): [-2147483648 => -2147483648] -2147483648
   int (2147483647): [2147483647 => 2147483647] 2147483647
   unsinged int (2147483647): [2147483647 => 2147483647] 2147483647
   unsinged int (4294967295): [4294967295 => 4294967295] 4294967295
   long long (-9223372036854775808): [-9223372036854775808 => -9223372036854775808] -9223372036854775808
   long long (9223372036854775807): [9223372036854775807 => 9223372036854775807] 9223372036854775807
   unsinged long long (9223372036854775807): [9223372036854775807 => 9223372036854775807] 9223372036854775807
   unsinged long long (18446744073709551615): [18446744073709551615 => 18446744073709551615] 18446744073709551615
floating points type>type test:
   float (0): [0.000000 => 0.000000] 0.0
   float (0.0): [0.000000 => 0.000000] 0.0
   float (1001/8): [125.125000 => 125.125000] 125.125
   float (125.125): [125.125000 => 125.125000] 125.125
   float (-1001/8): [-125.125000 => -125.125000] -125.125
   float (-125.125): [-125.125000 => -125.125000] -125.125
   double (0): [0.000000 => 0.000000] 0.0
   double (0.0): [0.000000 => 0.000000] 0.0
   double (1001/8): [125.125000 => 125.125000] 125.125
   double (125.125): [125.125000 => 125.125000] 125.125
   double (-1001/8): [-125.125000 => -125.125000] -125.125
   double (-125.125): [-125.125000 => -125.125000] -125.125
16 integer arguments type>type test:
   cccccccccccccccc2c (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 => 120] 120
   cccccccccccccccc2c (15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0): [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 => 120] 120
   ssssssssssssssss2s (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 => 120] 120
   ssssssssssssssss2s (15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0): [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 => 120] 120
   iiiiiiiiiiiiiiii2i (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 => 120] 120
   iiiiiiiiiiiiiiii2i (15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0): [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 => 120] 120
   llllllllllllllll2l (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 => 120] 120
   llllllllllllllll2l (15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0): [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 => 120] 120
   qqqqqqqqqqqqqqqq2q (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 => 120] 120
   qqqqqqqqqqqqqqqq2q (15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0): [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 => 120] 120
   CCCCCCCCCCCCCCCC2C (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 => 120] 120
   CCCCCCCCCCCCCCCC2C (15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0): [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 => 120] 120
   CCCCCCCCCCCCCCCC2C (0 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15): [0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15 => -120] -120
   CCCCCCCCCCCCCCCC2C (-15 -14 -13 -12 -11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0): [-15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0 => -120] -120
   SSSSSSSSSSSSSSSS2S (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 => 120] 120
   SSSSSSSSSSSSSSSS2S (15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0): [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 => 120] 120
   SSSSSSSSSSSSSSSS2S (0 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15): [0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15 => -120] -120
   SSSSSSSSSSSSSSSS2S (-15 -14 -13 -12 -11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0): [-15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0 => -120] -120
   IIIIIIIIIIIIIIII2I (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 => 120] 120
   IIIIIIIIIIIIIIII2I (15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0): [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 => 120] 120
   IIIIIIIIIIIIIIII2I (0 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15): [0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15 => -120] -120
   IIIIIIIIIIIIIIII2I (-15 -14 -13 -12 -11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0): [-15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0 => -120] -120
   LLLLLLLLLLLLLLLL2L (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 => 120] 120
   LLLLLLLLLLLLLLLL2L (15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0): [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 => 120] 120
   LLLLLLLLLLLLLLLL2L (0 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15): [0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15 => -120] -120
   LLLLLLLLLLLLLLLL2L (-15 -14 -13 -12 -11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0): [-15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0 => -120] -120
   QQQQQQQQQQQQQQQQ2Q (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 => 120] 120
   QQQQQQQQQQQQQQQQ2Q (15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0): [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 => 120] 120
   QQQQQQQQQQQQQQQQ2Q (0 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15): [0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15 => -120] -120
   QQQQQQQQQQQQQQQQ2Q (-15 -14 -13 -12 -11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0): [-15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0 => -120] -120
16 floating point arguments type>type test:
   16 floats (0 11/10 11/5 33/10 22/5 11/2 33/5 77/10 44/5 99/10 101/10 1111/100 303/25 1313/100 707/50 303/20): [0.000000, 1.100000, 2.200000, 3.300000, 4.400000, 5.500000, 6.600000, 7.700000, 8.800000, 9.900000, 10.100000, 11.110000, 12.120000, 13.130000, 14.140000, 15.150000 => 125.250000] 125.25
   16 floats (303/20 707/50 1313/100 303/25 1111/100 101/10 99/10 44/5 77/10 33/5 11/2 22/5 33/10 11/5 11/10 0): [15.150000, 14.140000, 13.130000, 12.120000, 11.110000, 10.100000, 9.900000, 8.800000, 7.700000, 6.600000, 5.500000, 4.400000, 3.300000, 2.200000, 1.100000, 0.000000 => 125.250000] 125.25
   16 floats (0.0 1.1 2.2 3.29999999 4.4 5.5 6.59999999 7.7 8.8 9.9 10.09999999 11.1099999 12.1199999 13.13 14.14 15.15): [0.000000, 1.100000, 2.200000, 3.300000, 4.400000, 5.500000, 6.600000, 7.700000, 8.800000, 9.900000, 10.100000, 11.110000, 12.120000, 13.130000, 14.140000, 15.150000 => 125.250000] 125.25
12 mixed type variables test:
   12 arguments (0 1 2 3 4 5 6 7 8 9 9877/8 493825/4): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1234.625000, 123456.250000 => 124735.875000] 124735.875
22 mixed type variables test:
   22 integer arguments (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22): [1, 2, 3.000000, 4.000000, 5, 6, 7.000000, 8.000000, 9, 10, 11.000000, 12.000000, 13, 14, 15.000000, 16.000000, 17, 18, 19.000000, 20.000000, 21.000000, 22.000000 => 253.000000] 253.0
   22 mixed arguments (1 2 3 9/2 5 6 29/4 35/4 9 10 89/8 103/8 13 14 255/16 267/16 17 18 631/32 671/32 701/32 183/8): [1, 2, 3.000000, 4.500000, 5, 6, 7.250000, 8.750000, 9, 10, 11.125000, 12.875000, 13, 14, 15.937500, 16.687500, 17, 18, 19.718750, 20.968750, 21.906250, 22.875000 => 260.593750] 260.59375
   22 mixed inexact arguments (1 2 3.0 4.5 5 6 7.25 8.75 9 10 11.125 12.875 13 14 15.9375 16.6875 17 18 19.71875 20.96875 21.90625 22.875): [1, 2, 3.000000, 4.500000, 5, 6, 7.250000, 8.750000, 9, 10, 11.125000, 12.875000, 13, 14, 15.937500, 16.687500, 17, 18, 19.718750, 20.968750, 21.906250, 22.875000 => 260.593750] 260.59375
callback: [ (0) ] = 0.000000
callback: [ (9227469/8388608) ] = 1.100000
callback: [ (-9227469/8388608) ] = -1.100000
callback: [ (8319/64) ] = 129.984375
callback: [ (-8319/64) ] = -129.984375
callback: [ (0 0 0 0) ] = 0.000000
callback: [ (1 9227469/8388608 -2 -9227469/4194304) ] = 4.840000
callback: [ (-1 -9227469/8388608 2 9227469/4194304) ] = 4.840000
callback: [ (999999 -8319/64 111111 -8295/512) ] = 233988325113856.000000
callback: [ (-999999 8319/64 -111111 8295/512) ] = 233988325113856.000000
reverse_string(hello): olleh - ok. 
reverse_string_wide(hello): olleh - ok. 
reverse_string(привет): тевирп - ok. 
reverse_string_wide(привет): тевирп - ok. 
reverse_string(Совы (Strigiformes) суть релатівно чісленым рядом класы птахів обсягуюча веце як 200 видів.): .відив 002 кя ецев ачюугясбо віхатп ысалк модяр мынелсіч онвіталер ьтус )semrofigirtS( ывоС - ok. 
reverse_string_wide(Совы (Strigiformes) суть релатівно чісленым рядом класы птахів обсягуюча веце як 200 видів.): .відив 002 кя ецев ачюугясбо віхатп ысалк модяр мынелсіч онвіталер ьтус )semrofigirtS( ывоС - ok. 
reverse_string(ბუსნაირნი (ლათ. Strigiformes) — ფრინველთა რიგი. ფართოდაა გავრცელებული მსოფლიოში (ანტარქტიკული და ზოგიერთი ოკეანური კუნძულის გამოკლებით).): .)თიბელკომაგ სილუძნუკ ირუნაეკო ითრეიგოზ ად ილუკიტქრატნა( იშოილფოსმ ილუბელეცრვაგ აადოთრაფ .იგირ ათლევნირფ — )semrofigirtS .თალ( ინრიანსუბ - ok. 
reverse_string_wide(ბუსნაირნი (ლათ. Strigiformes) — ფრინველთა რიგი. ფართოდაა გავრცელებული მსოფლიოში (ანტარქტიკული და ზოგიერთი ოკეანური კუნძულის გამოკლებით).): .)თიბელკომაგ სილუძნუკ ირუნაეკო ითრეიგოზ ად ილუკიტქრატნა( იშოილფოსმ ილუბელეცრვაგ აადოთრაფ .იგირ ათლევნირფ — )semrofigirtS .თალ( ინრიანსუბ - ok. 
reverse_string(フクロウ目（フクロウもく、梟目、学名 Strigiformes）は鳥類の1目である。): 。るあで目1の類鳥は）semrofigirtS 名学、目梟、くもウロクフ（目ウロクフ - ok. 
reverse_string_wide(フクロウ目（フクロウもく、梟目、学名 Strigiformes）は鳥類の1目である。): 。るあで目1の類鳥は）semrofigirtS 名学、目梟、くもウロクフ（目ウロクフ - ok. 
basic simple fft-any > type test:
   c2c (1): [1 => 1] 1
   c2c (125): [125 => 125] 125
   c2c (0): [0 => 0] 0
   s2s (1): [1 => 1] 1
   s2s (125): [125 => 125] 125
   s2s (0): [0 => 0] 0
   i2i (1): [1 => 1] 1
   i2i (125): [125 => 125] 125
   i2i (0): [0 => 0] 0
   l2l (1): [1 => 1] 1
   l2l (125): [125 => 125] 125
   l2l (0): [0 => 0] 0
   q2q (1): [1 => 1] 1
   q2q (125): [125 => 125] 125
   q2q (0): [0 => 0] 0
   C2C (1): [1 => 1] 1
   C2C (125): [125 => 125] 125
   C2C (0): [0 => 0] 0
   C2C (-125): [-125 => -125] -125
   C2C (-1): [-1 => -1] -1
   S2S (1): [1 => 1] 1
   S2S (125): [125 => 125] 125
   S2S (0): [0 => 0] 0
   S2S (-125): [-125 => -125] -125
   S2S (-1): [-1 => -1] -1
   I2I (1): [1 => 1] 1
   I2I (125): [125 => 125] 125
   I2I (0): [0 => 0] 0
   I2I (-125): [-125 => -125] -125
   I2I (-1): [-1 => -1] -1
   L2L (1): [1 => 1] 1
   L2L (125): [125 => 125] 125
   L2L (0): [0 => 0] 0
   L2L (-125): [-125 => -125] -125
   L2L (-1): [-1 => -1] -1
   Q2Q (1): [1 => 1] 1
   Q2Q (125): [125 => 125] 125
   Q2Q (0): [0 => 0] 0
   Q2Q (-125): [-125 => -125] -125
   Q2Q (-1): [-1 => -1] -1
floating points fft-any > type test:
   float (0): [0.000000 => 0.000000] 0.0
   float (0.0): [0.000000 => 0.000000] 0.0
   float (1001/8): [125.125000 => 125.125000] 125.125
   float (125.125): [125.125000 => 125.125000] 125.125
   float (-1001/8): [-125.125000 => -125.125000] -125.125
   float (-125.125): [-125.125000 => -125.125000] -125.125
   double (0): [0.000000 => 0.000000] 0.0
   double (0.0): [0.000000 => 0.000000] 0.0
   double (1001/8): [125.125000 => 125.125000] 125.125
   double (125.125): [125.125000 => 125.125000] 125.125
   double (-1001/8): [-125.125000 => -125.125000] -125.125
   double (-125.125): [-125.125000 => -125.125000] -125.125
basic simple fft-any (fft*)) > type test:
   rc2c ((1)): [1 => 1] 1
   rc2c ((125)): [125 => 125] 125
   rc2c ((0)): [0 => 0] 0
   rs2s ((1)): [1 => 1] 1
   rs2s ((125)): [125 => 125] 125
   rs2s ((0)): [0 => 0] 0
   ri2i ((1)): [1 => 1] 1
   ri2i ((125)): [125 => 125] 125
   ri2i ((0)): [0 => 0] 0
   rl2l ((1)): [1 => 1] 1
   rl2l ((125)): [125 => 125] 125
   rl2l ((0)): [0 => 0] 0
   rq2q ((1)): [1 => 1] 1
   rq2q ((125)): [125 => 125] 125
   rq2q ((0)): [0 => 0] 0
   rC2C ((1)): [1 => 1] 1
   rC2C ((125)): [125 => 125] 125
   rC2C ((0)): [0 => 0] 0
   rC2C ((-125)): [-125 => -125] -125
   rC2C ((-1)): [-1 => -1] -1
   rS2S ((1)): [1 => 1] 1
   rS2S ((125)): [125 => 125] 125
   rS2S ((0)): [0 => 0] 0
   rS2S ((-125)): [-125 => -125] -125
   rS2S ((-1)): [-1 => -1] -1
   rI2I ((1)): [1 => 1] 1
   rI2I ((125)): [125 => 125] 125
   rI2I ((0)): [0 => 0] 0
   rI2I ((-125)): [-125 => -125] -125
   rI2I ((-1)): [-1 => -1] -1
   rL2L ((1)): [1 => 1] 1
   rL2L ((125)): [125 => 125] 125
   rL2L ((0)): [0 => 0] 0
   rL2L ((-125)): [-125 => -125] -125
   rL2L ((-1)): [-1 => -1] -1
   rQ2Q ((1)): [1 => 1] 1
   rQ2Q ((125)): [125 => 125] 125
   rQ2Q ((0)): [0 => 0] 0
   rQ2Q ((-125)): [-125 => -125] -125
   rQ2Q ((-1)): [-1 => -1] -1
   rf2f ((1.0)): [1.000000 => 1.000000] 1.0
   rf2f ((125.125)): [125.125000 => 125.125000] 125.125
   rf2f ((-125.125)): [-125.125000 => -125.125000] -125.125
   rf2f ((0.0)): [0.000000 => 0.000000] 0.0
   rd2d ((1.0)): [1.000000 => 1.000000] 1.0
   rd2d ((125.125)): [125.125000 => 125.125000] 125.125
   rd2d ((-125.125)): [-125.125000 => -125.125000] -125.125
   rd2d ((0.0)): [0.000000 => 0.000000] 0.0
basic extended fft-any (fft&)) > type test:
   rpc2c3 ((1 2 0)): [1, 2, 0 => 3] 3 -> (1 2 3)
   rpc2c3 ((125 0 0)): [125, 0, 0 => 125] 125 -> (125 0 125)
   rpc2c3 ((0 125 0)): [0, 125, 0 => 125] 125 -> (0 125 125)
   rps2s3 ((1 2 0)): [1, 2, 0 => 3] 3 -> (1 2 3)
   rps2s3 ((125 0 0)): [125, 0, 0 => 125] 125 -> (125 0 125)
   rps2s3 ((0 125 0)): [0, 125, 0 => 125] 125 -> (0 125 125)
   rpi2i3 ((1 2 0)): [1, 2, 0 => 3] 3 -> (1 2 3)
   rpi2i3 ((125 0 0)): [125, 0, 0 => 125] 125 -> (125 0 125)
   rpi2i3 ((0 125 0)): [0, 125, 0 => 125] 125 -> (0 125 125)
   rpC2C3 ((1 2 0)): [1, 2, 0 => 3] 3 -> (1 2 3)
   rpC2C3 ((125 0 0)): [125, 0, 0 => 125] 125 -> (125 0 125)
   rpC2C3 ((0 125 0)): [0, 125, 0 => 125] 125 -> (0 125 125)
   rpC2C3 ((-125 1 0)): [-125, 1, 0 => -124] -124 -> (-125 1 -124)
   rpC2C3 ((-1 -125 0)): [-1, -125, 0 => -126] -126 -> (-1 -125 -126)
   rpS2S3 ((1 2 3)): [1, 2, 3 => 3] 3 -> (1 2 3)
   rpS2S3 ((125 0 125)): [125, 0, 125 => 125] 125 -> (125 0 125)
   rpS2S3 ((0 125 125)): [0, 125, 125 => 125] 125 -> (0 125 125)
   rpS2S3 ((-125 1 -124)): [-125, 1, -124 => -124] -124 -> (-125 1 -124)
   rpS2S3 ((-1 -125 -126)): [-1, -125, -126 => -126] -126 -> (-1 -125 -126)
   rpI2I3 ((1 2 3)): [1, 2, 3 => 3] 3 -> (1 2 3)
   rpI2I3 ((125 0 125)): [125, 0, 125 => 125] 125 -> (125 0 125)
   rpI2I3 ((0 125 125)): [0, 125, 125 => 125] 125 -> (0 125 125)
   rpI2I3 ((-125 1 -124)): [-125, 1, -124 => -124] -124 -> (-125 1 -124)
   rpI2I3 ((-1 -125 -126)): [-1, -125, -126 => -126] -126 -> (-1 -125 -126)
   rpf2f3 ((1.0 2.0 0.0)): [1.000000, 2.000000, 0.000000 => 3.000000] 3.0 -> (1.0 2.0 3.0)
   rpf2f3 ((125.125 0.0 0.0)): [125.125000, 0.000000, 0.000000 => 125.125000] 125.125 -> (125.125 0.0 125.125)
   rpf2f3 ((0.0 125.125 0.0)): [0.000000, 125.125000, 0.000000 => 125.125000] 125.125 -> (0.0 125.125 125.125)
   rpf2f3 ((-125.125 -125.125 0.0)): [-125.125000, -125.125000, 0.000000 => -250.250000] -250.25 -> (-125.125 -125.125 -250.25)
   rpf2f3 ((125.125 -125.125 0.0)): [125.125000, -125.125000, 0.000000 => 0.000000] 0.0 -> (125.125 -125.125 0.0)
   rpd2d3 ((1.0 2.0 0.0)): [1.000000, 2.000000, 0.000000 => 3.000000] 3.0 -> (1.0 2.0 3.0)
   rpd2d3 ((125.125 0.0 0.0)): [125.125000, 0.000000, 0.000000 => 125.125000] 125.125 -> (125.125 0.0 125.125)
   rpd2d3 ((0.0 125.125 0.0)): [0.000000, 125.125000, 0.000000 => 125.125000] 125.125 -> (0.0 125.125 125.125)
   rpd2d3 ((-125.125 -125.125 0.0)): [-125.125000, -125.125000, 0.000000 => -250.250000] -250.25 -> (-125.125 -125.125 -250.25)
   rpd2d3 ((125.125 -125.125 0.0)): [125.125000, -125.125000, 0.000000 => 0.000000] 0.0 -> (125.125 -125.125 0.0)
[42 43.340000 44 45.540000]
done.
